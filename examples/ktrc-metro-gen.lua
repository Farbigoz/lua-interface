-- Импорт библиотек
require "interface"
require "def"

-- Получение интерфейсов
ars   = interface.arsGen        -- Генератор АРС
trc3  = interface.trc3Gen       -- Генератор ТРЦ3

can   = interface.canMap        -- Маппер CAN сообщений

inp   = interface.inputs        -- Входы (битовые, числовые)

-- Функция инициализации и конфигурации (Вызывается автоматически)
function setup()
    -- Конфигурация генератора ТРЦ3
    trc3.level   = 100          -- Уровень (В)
    trc3.carrier = def.F_565_HZ -- Несущая (Гц)
    trc3.mod     = def.F_8_HZ   -- Модуляция (Гц)

    -- Конфигурация генератора АРС
    ars.level.f75  = 80         -- Уровень частоты 75  (В)
    ars.level.f125 = 85         -- Уровень частоты 125 (В)
    ars.level.f175 = 90         -- Уровень частоты 175 (В)
    ars.level.f225 = 95         -- Уровень частоты 225 (В)
    ars.level.f275 = 100        -- Уровень частоты 275 (В)
    ars.level.f325 = 105        -- Уровень частоты 325 (В)

    -- Конфигурация маппера CAN сообщений
    can[0x12345678] = {         -- Индекс - Айди CAN сообщения
        pos = 32,               -- Позиция начала бита/битов для считывания
        len = 2,                -- Количество бит для считывания
        inp = 0,                -- Номер входа для записи
        d = 0,                  -- Значение по-умолчанию (безопасное значение)
        timeout = 200           -- Максимальное время между получением сообщения.
    }                           -- Подробно в "lua_interface.h" - `CanMapperNodeStruct`
    can[0x12345678] = {pos = 34, len = 2, inp = 0, d = 0, timeout = 200}
end

-- Функция обработки логики (Вызывается автоматически)
function loop()
    -- gen:1,freq:75hz
    ars.g1.f75      = (inp[0] | inp[1]) & (~inp[10])
    ...
    -- gen:2,freq:225hz
    ars.g2.f225     = inp[7] == def.WAY_EVEN
    ...
    ars.g1.f325     = inp[9] == def.TC_STATE_LOG_BUSY
    ...

    ars.g1.f275_ao  = ...
    -- или
    ars.g2.f275_ao  = ...
end
